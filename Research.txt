int __fastcall UpdateSamus(unsigned __int8 isFacingLeft)
{
  int IsSamusFacingLeft; // r4
  int backupOfLastpreIndex; // r5
  int previousPosIndex; // r0
  int CurrentPose; // r8
  signed int samusDirection; // r7
  int CopyIndex; // r2
  int PoseIndex; // r0
  __int16 **Animtable; // r6
  int **currentSizeTable; // r1
  __int16 ***DifferentAnimTable; // r2
  int TheDirectionIndex; // r1
  int *GfxSizeTable; // r4
  int someIndex; // r5
  SamusAnim*theCurrentAnim; // r6
  int tophalf; // r3
  unsigned __int8 *LegsPointer; // r3
  int *CannonBottomTemp; // r0
  signed __int16 v18; // r0
  __int32 v19; // t1
  __int32 DMAReturn2; // r0
  int facingDirections; // r1
  int CannonBottomHalf; // r0
  int *NewPalPointer; // r4
  unsigned int speedBoostIndex; // r1
  int indexByXTimer; // r1
  int *PalTablePointer; // r0
  int *FinalPalPointer; // r0
  int PalIndex; // r1
  int PalSize; // r2
  int *AnotherPalPointer; // r4
  unsigned int CurAnimState; // r1
  int SavingPalIndex; // r1
  int *APalTable; // r0
  int (**APalPointer)[5]; // r1
  __int32 ChargeBeamStartPalCounter; // r1
  int chargeCounter; // r1
  int *PalPointer; // r4
  int returnVal; // [sp+18h] [bp-4h]

  IsSamusFacingLeft = isFacingLeft;
  if ( SamusPose != GettingHurt && Invincibilitytimer )
    --Invincibilitytimer;
  if ( AbsorbXTimer )
    --AbsorbXTimer;
  if ( SpeedBoosting )
  {
    SpeedBoostingindicator = 1;
    SpeedBoostingindicatorCurrent = 16;
  }
  else if ( SpeedBoostingindicatorCurrent )
  {
    --SpeedBoostingindicatorCurrent;
  }
  else
  {
    SpeedBoostingindicator = SpeedBoostingindicatorCurrent;
  }
  backupOfLastpreIndex = lastPreviousPositionIndex;
  previousPosIndex = 2 * (lastPreviousPositionIndex & 0x3F);
  *(Previous_64_X_positions + previousPosIndex) = Previous_SamusX_position;
  *(Previous_64_Y_positions + previousPosIndex) = Previous_SamusY_position;
  lastPreviousPositionIndex = backupOfLastpreIndex + 1;
  if ( backupOfLastpreIndex << 16 > 0x1000000 )
    lastPreviousPositionIndex = backupOfLastpreIndex - 127;
  if ( lastPreviousPositionIndex > 63 )
    startNewPrevPositions = 1;
  CurrentPose = SamusPose;
  samusDirection = ArmCannonDirection;
  if ( SamusPose <= 0x3Fu )
  {
    switch ( SamusPose )
    {
      case 0:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D4C4 + PoseIndex);
        currentSizeTable = &off_828DAE4;
        goto SetGFXTablePointer;
      case 1:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D4EC + PoseIndex);
        currentSizeTable = &off_828DB0C;
        goto SetGFXTablePointer;
      case 2:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(off_828D514 + PoseIndex);
        currentSizeTable = &off_828DB34;
        goto SetGFXTablePointer;
      case 3:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D53C + PoseIndex);
        currentSizeTable = &off_828DB5C;
        goto SetGFXTablePointer;
      case 4:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D55C + PoseIndex);
        currentSizeTable = &off_828DB7C;
        goto SetGFXTablePointer;
      case 5:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D58C + PoseIndex);
        currentSizeTable = &off_828DBAC;
        goto SetGFXTablePointer;
      case 6:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D5BC + PoseIndex);
        currentSizeTable = off_828DBDC;
        goto SetGFXTablePointer;
      case 7:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(off_828D634 + PoseIndex);
        currentSizeTable = &off_828DC54;
        goto SetGFXTablePointer;
      case 8:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D60C + PoseIndex);
        currentSizeTable = &off_828DC2C;
        goto SetGFXTablePointer;
      case 9:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(off_828D634 + PoseIndex);
        currentSizeTable = &off_828DC54;
        goto SetGFXTablePointer;
      case 0x18:
        if ( (SamusDirection ^ 0x30) & Button_input )
          samusDirection = (ArmCannonDirection + 1) & 0xFF;
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * samusDirection;
        Animtable = *(&off_828D65C + PoseIndex);
        currentSizeTable = off_828DC7C;
        goto SetGFXTablePointer;
      case GotHighJumpSpookyBlowup|0x6:
        if ( MissilesSelected == 1 )
          samusDirection = (ArmCannonDirection + 1) & 0xFF;
        DifferentAnimtable = off_828D674;
        goto LABEL_40;
      case 0x24:
        samusDirection = Direction;
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * Direction;
        Animtable = *(&off_828D684 + PoseIndex);
        currentSizeTable = &dword_828DC8C;
        goto SetGFXTablePointer;
      case ENTERDATAROOM:
        samusDirection = Direction;
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * Direction;
        Animtable = *(&off_828D69C + PoseIndex);
        currentSizeTable = &dword_828DCA4;
        goto SetGFXTablePointer;
      case 0x28:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D6B4 + PoseIndex);
        currentSizeTable = &off_828DCBC;
        goto SetGFXTablePointer;
      case 0x29:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(off_828D6E4 + PoseIndex);
        currentSizeTable = &off_828DCEC;
        goto SetGFXTablePointer;
      case EnteredNOCNav:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D714 + PoseIndex);
        currentSizeTable = off_828DD1C;
        goto SetGFXTablePointer;
      case IceXHurtYou:
        CopyIndex = 4 * IsSamusFacingLeft;
        PoseIndex = 4 * IsSamusFacingLeft + 8 * ArmCannonDirection;
        Animtable = *(&off_828D744 + PoseIndex);
        currentSizeTable = off_828DD4C;
        goto SetGFXTablePointer;
      case 0x3F:
        samusDirection = (-(Button_input & 0x70) | Button_input & 0x70u) >> 31;
        DifferentAnimtable = off_828D784;
LABEL_40:
        TheDirectionIndex = 4 * IsSamusFacingLeft;
        Animtable = (&DifferentAnimTable[2 * samusDirection])[IsSamusFacingLeft];
        GfxSizeTable = (&(&off_828D8DC)[2 * SamusPose])[IsSamusFacingLeft];
        someIndex = TheDirectionIndex;
        goto SetOAM;
      default:
        break;
    }
  }
  CopyIndex = 4 * IsSamusFacingLeft;
  PoseIndex = 4 * IsSamusFacingLeft + 8 * SamusPose;
  Animtable = *(&off_828D2BC + PoseIndex);
  currentSizeTable = &off_828D8DC;
SetGFXTablePointer:
  GfxSizeTable = *(currentSizeTable + PoseIndex);
  someIndex = CopyIndex;
SetOAM:
  theCurrentAnim = &Animtable[4 * CurrentAnimation];
  SamusOAMPointer = theCurrentAnim->OAMPointer;
  tophalf = theCurrentAnim->Tophalf;
  SamusGFXTophalfTileLen = 32 * *theCurrentAnim->Tophalf;
  SamusGFXBottomHalfLen = 32 * *++tophalf;
  SamusGFXTopHalf = tophalf + 1;
  SamusGFXBottom = tophalf + 1 + SamusGFXTophalfTileLen;
  LegsPointer = theCurrentAnim->BottomHalf;
  SamusGFXLegsTopLen = 32 * *LegsPointer++;
  SamusGFXLegsBottomLen = 32 * *LegsPointer;
  SamusGFXLegsTop = (LegsPointer + 1);
  SamusGFXLegsBottom = &LegsPointer[SamusGFXLegsTopLen + 1];
  gfxsize = 0;
  CannonTopHalfGFXLen = 0;
  CannonBottomHalfGFXLen = 0;
  if ( SamusPose - 23 > 0x29 )
  {
HandleDirection:
    GfxTablePnt = GfxSizeTable[2 * CurrentAnimation + 1];
    gfxsize = *GfxTablePnt;
    if ( MissilesSelected & 1 )
    {
      if ( SamusDirection & DirectionRight )
      {
        facingDirections = 4 * samusDirection;
        CannonTopHalfGFX = off_828F99C[samusDirection];
        CannonBottomHalf = off_828F9B4;
      }
      else
      {
        facingDirections = 4 * samusDirection;
        CannonTopHalfGFX = off_828F9CC[samusDirection];
        CannonBottomHalf = off_828F9E4;
      }
    }
    else if ( SamusDirection & DirectionRight )
    {
      facingDirections = 4 * samusDirection;
      CannonTopHalfGFX = off_828F93C[samusDirection];
      CannonBottomHalf = off_828F954;
    }
    else
    {
      facingDirections = 4 * samusDirection;
      CannonTopHalfGFX = off_828F96C[samusDirection];
      CannonBottomHalf = off_828F984;
    }
SetCannonBottomHalfTemp:
    CannonBottomTemp = *(facingDirections + CannonBottomHalf);
SetCannonBottomHalfGFX:
    CannonBottomHalfGFX = CannonBottomTemp;
    v18 = 192;
SetCannonTopHalfLen:
    CannonTopHalfGFXLen = v18;
SetCannonBottomHalfLen:
    CannonBottomHalfGFXLen = v18;
  }
  else
  {
    switch ( SamusPose )
    {
      case 0x17:
        GfxTablePnt = *(&off_828BF98 + 2 * screwAttackAnimationCounter);
        gfxsize = 0x2000;
        CannonTopHalfGFX = dword_82DE9B0;
        CannonBottomTemp = &dword_82DEA70;
        goto SetCannonBottomHalfGFX;
      case 0x1E:
        GfxTablePnt = (*(off_828D66C + someIndex))[2 * screwAttackAnimationCounter];
        gfxsize = 4096;
        CannonTopHalfGFX = *(&off_828FABC + screwAttackAnimationCounter);
        CannonBottomHalfGFX = *(&off_828FACC + screwAttackAnimationCounter);
        v18 = 256;
        goto SetCannonTopHalfLen;
      case 0x28:
      case 0x29:
        GfxTablePnt = GfxSizeTable[2 * CurrentAnimation + 1];
        gfxsize = *GfxTablePnt;
        if ( MissilesSelected & 1 )
        {
          if ( SamusDirection & DirectionRight )
          {
            facingDirections = 4 * samusDirection;
            CannonTopHalfGFX = off_828F99C[samusDirection];
            CannonBottomHalf = off_828F9B4;
          }
          else
          {
            facingDirections = 4 * samusDirection;
            CannonTopHalfGFX = off_828F9CC[samusDirection];
            CannonBottomHalf = off_828F9E4;
          }
        }
        else if ( SamusDirection & DirectionRight )
        {
          facingDirections = 4 * samusDirection;
          CannonTopHalfGFX = *(&off_828FA5C + samusDirection);
          CannonBottomHalf = &off_828FA74;
        }
        else
        {
          facingDirections = 4 * samusDirection;
          CannonTopHalfGFX = off_828FA8C[samusDirection];
          CannonBottomHalf = off_828FAA4;
        }
        goto SetCannonBottomHalfTemp;
      case 0x2B:
      case 0x2E:
      case 0x2F:
        GfxTablePnt = GfxSizeTable[2 * CurrentAnimation + 1];
        gfxsize = *GfxTablePnt;
        if ( MissilesSelected & 1 )
        {
          if ( SamusDirection & DirectionRight )
          {
            facingDirections = 4 * samusDirection;
            CannonTopHalfGFX = off_828F99C[samusDirection];
            CannonBottomHalf = off_828F9B4;
          }
          else
          {
            facingDirections = 4 * samusDirection;
            CannonTopHalfGFX = off_828F9CC[samusDirection];
            CannonBottomHalf = off_828F9E4;
          }
        }
        else if ( SamusDirection & DirectionRight )
        {
          facingDirections = 4 * samusDirection;
          CannonTopHalfGFX = off_828F9FC[samusDirection];
          CannonBottomHalf = off_828FA14;
        }
        else
        {
          facingDirections = 4 * samusDirection;
          CannonTopHalfGFX = off_828FA2C[samusDirection];
          CannonBottomHalf = off_828FA44;
        }
        goto SetCannonBottomHalfTemp;
      case 0x34:
        GfxTablePnt = (*(&off_828D774 + someIndex))[2 * screwAttackAnimationCounter];
        gfxsize = 0x2000;
        CannonTopHalfGFX = dword_82E4250;
        CannonBottomHalfGFX = dword_82E4450;
        v18 = 512;
        goto SetCannonTopHalfLen;
      case 0x3D:
        if ( ScrewAttackState != 1 )
          break;
        GfxTablePnt = (&off_828CE8C)[2 * screwAttackAnimationCounter];
        gfxsize = 4096;
        CannonTopHalfGFX = *(&off_828FADC + screwAttackAnimationCounter);
        CannonBottomHalfGFX = off_828FB9C[screwAttackAnimationCounter];
        CannonTopHalfGFXLen = 384;
        v18 = 256;
        goto SetCannonBottomHalfLen;
      case 0x3E:
        switch ( ScrewAttackState )
        {
          case 0:
            DMA3SAD = dword_82DF730;
            DMA3DAD = &Sprite_tiles[576];
            DMA3CNT_L = 0x80000030;
            v19 = DMA3CNT_L;
            DMA3SAD = dword_82DF790;
            DMA3DAD = &Sprite_tiles[832];
            DMA3CNT_L = 0x80000020;
            DMAReturn2 = DMA3CNT_L;
            goto LABEL_82;
          case 2:
            GfxTablePnt = (*(off_828D77C + someIndex))[2 * screwAttackAnimationCounter];
            gfxsize = 0x2000;
            CannonTopHalfGFX = *(&off_828FC5C + screwAttackAnimationCounter);
            CannonBottomHalfGFX = off_828FC74[screwAttackAnimationCounter];
            v18 = 256;
            goto SetCannonTopHalfLen;
          case 3:
            gfxsize = 0x2000;
            break;
        }
        break;
      case 0x40:
        samusDirection = 5;
        goto HandleDirection;
      default:
        goto HandleDirection;
    }
  }
LABEL_82:
  if ( SamusPose != SamusDying )
  {
    if ( Invincibilitytimer && (8BitFrameCounter & 3u) <= 1 )
      goto SomeSuitLen;
    if ( AbsorbXTimer )
    {
      SuitPalLen = 64;
      indexByXTimer = 8 * ((48 - AbsorbXTimer) >> 1);
      PalTablePointer = XabsorbTable;
ChangePalPointer:
      NewPalPointer = &PalTablePointer[indexByXTimer];
      goto AnUpdatePal;
    }
    if ( ((byte_3001304 - 1) & 0xFFu) <= 3 )
    {
SomeSuitLen:
      SuitPalLen = 64;
      NewPalPointer = dword_828DDFC;
AnUpdatePal:
      UpdateSamusSAXPal(NewPalPointer, 0, 16, 0);
      goto SetPalPointer;
    }
    if ( SamusPose - 30 > 0x1F )
    {
BasicPal:
      SuitPalLen = 64;
      if ( SpeedBoosting || Shinespark_timer )
      {
        NewPalPointer = dword_828DEBC;
        if ( 8BitFrameCounter & 8 )
          NewPalPointer = dword_828DE9C;
        goto AnUpdatePal;
      }
      if ( ChargeBeamCounter <= 0x3Fu )
      {
        if ( SamusSuitStatus & SaxSuit )
        {
          PalPointer = dword_828DDDC;
        }
        else if ( SamusSuitStatus & 0x20 )
        {
          PalPointer = dword_828DDBC;
        }
        else
        {
          PalPointer = dword_828DD7C;
          if ( SamusSuitStatus & 0x10 )
            PalPointer = &dword_828DD7C[8];
        }
        UpdateSamusSAXPal(PalPointer, 0, 16, 0);
        if ( CurrentPose != 52 )
          PalPointer = dword_828DE1C;
        UpdateSamusSAXPal(PalPointer, 16, 16, 0);
        return returnVal;
      }
      if ( SamusSuitStatus & SaxSuit )
      {
        ChargeBeamStartPalCounter = 12;
      }
      else if ( SamusSuitStatus & GravitySuit )
      {
        ChargeBeamStartPalCounter = 8;
      }
      else
      {
        ChargeBeamStartPalCounter = (-(SamusSuitStatus & Varia) >> 31) & 4;
      }
      chargeCounter = ChargeBeamStartPalCounter + ((ChargeBeamCounter - 64) >> 2);
      if ( BeamStatus & 0x10 )
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828F4FC;
      }
      else if ( BeamStatus & 8 )
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828F2FC;
      }
      else if ( BeamStatus & 4 )
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828F0FC;
      }
      else if ( BeamStatus & 2 )
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828EEFC;
      }
      else if ( BeamStatus & 1 )
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828ECFC;
      }
      else
      {
        indexByXTimer = 8 * chargeCounter;
        PalTablePointer = dword_828EAFC;
      }
      goto ChangePalPointer;
    }
    switch ( SamusPose )
    {
      case 0x1E:
        SuitPalLen = 64;
        if ( CurrentAnimation > 4u )
        {
          if ( CurrentAnimation <= 7u )
          {
            AnotherPalPointer = dword_828DE3C;
            goto LABEL_111;
          }
          AnotherPalPointer = dword_828DE3C;
          if ( CurrentAnimation <= 0xCu )
            goto LABEL_110;
        }
        else
        {
          if ( SamusSuitStatus & SaxSuit )
          {
            AnotherPalPointer = dword_828DDDC;
            goto LABEL_111;
          }
          if ( SamusSuitStatus & GravitySuit )
          {
            AnotherPalPointer = dword_828DDBC;
            goto LABEL_111;
          }
          AnotherPalPointer = dword_828DD7C;
          if ( SamusSuitStatus & Varia )
          {
LABEL_110:
            AnotherPalPointer += 8;
            goto LABEL_111;
          }
        }
LABEL_111:
        UpdateSamusSAXPal(AnotherPalPointer, 0, 16, 0);
        NewPalPointer = dword_828DE7C;
        goto SetPalPointer;
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
        SuitPalLen = 64;
        FinalPalPointer = dword_828E0FC;
        PalIndex = 0;
        PalSize = 32;
        goto JustUpdatePal;
      case 0x35:
        SuitPalLen = 32;
        CurAnimState = (CurrentAnimation >> 1) & 3;
        if ( SamusSuitStatus & SaxSuit )
        {
          SavingPalIndex = 8 * CurAnimState;
          APalTable = dword_828F87C;
        }
        else if ( SamusSuitStatus & GravitySuit )
        {
          SavingPalIndex = 8 * CurAnimState;
          APalTable = dword_828F7FC;
        }
        else if ( SamusSuitStatus & Varia )
        {
          SavingPalIndex = 8 * CurAnimState;
          APalTable = dword_828F77C;
        }
        else
        {
          SavingPalIndex = 8 * CurAnimState;
          APalTable = dword_828F6FC;
        }
        FinalPalPointer = &APalTable[SavingPalIndex];
        PalIndex = 0;
        goto DefaultPalsSize;
      case 0x3D:
        SuitPalLen = 64;
        if ( SamusSuitStatus & SaxSuit )
        {
          APalPointer = off_828EA8C;
        }
        else if ( SamusSuitStatus & GravitySuit )
        {
          APalPointer = off_828EA1C;
        }
        else if ( SamusSuitStatus & Varia )
        {
          APalPointer = off_828E9AC;
        }
        else
        {
          APalPointer = off_828E93C;
        }
        UpdateSamusSAXPal(APalPointer[CurrentAnimation], 0, 16, 0);
        NewPalPointer = dword_828E61C;
        goto SetPalPointer;
      default:
        goto BasicPal;
    }
  }
  SuitPalLen = 64;
  UpdateSamusSAXPal(dword_828DEDC, 0, 16, 0);
  NewPalPointer = dword_828DEFC;
  if ( screwAttackAnimationCounter > 4u )
  {
    if ( SpeedBoostCounter > 0x4Fu )
    {
      GameMode = 8;
      EventController = 0;
    }
    else
    {
      ++SpeedBoostCounter;
    }
    if ( SpeedBoostCounter > 0x3Bu )
      speedBoostIndex = 15;
    else
      speedBoostIndex = SpeedBoostCounter << 24 >> 26;
    NewPalPointer = &dword_828DEFC[8 * speedBoostIndex];
  }
SetPalPointer:
  FinalPalPointer = NewPalPointer;
  PalIndex = 16;
DefaultPalsSize:
  PalSize = 16;
JustUpdatePal:
  UpdateSamusSAXPal(FinalPalPointer, PalIndex, PalSize, 0);
  return returnVal;
}